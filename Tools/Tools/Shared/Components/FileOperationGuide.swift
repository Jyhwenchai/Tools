//
//  FileOperationGuide.swift
//  Tools
//
//  Created by Kiro on 2025/7/20.
//

import SwiftUI
import UniformTypeIdentifiers

/// Component that provides helpful guidance for file operations
struct FileOperationGuide: View {
  let operationType: OperationType
  @State private var showingGuide = false
  
  enum OperationType {
    case dragDrop
    case fileSelection
    case fileSaving
    case batchProcessing
    case troubleshooting
    
    var title: String {
      switch self {
      case .dragDrop: return "ÊãñÊãΩÊñá‰ª∂Êìç‰ΩúÊåáÂçó"
      case .fileSelection: return "Êñá‰ª∂ÈÄâÊã©ÊåáÂçó"
      case .fileSaving: return "Êñá‰ª∂‰øùÂ≠òÊåáÂçó"
      case .batchProcessing: return "ÊâπÈáèÂ§ÑÁêÜÊåáÂçó"
      case .troubleshooting: return "Â∏∏ËßÅÈóÆÈ¢òËß£ÂÜ≥"
      }
    }
    
    var icon: String {
      switch self {
      case .dragDrop: return "hand.draw"
      case .fileSelection: return "folder"
      case .fileSaving: return "square.and.arrow.down"
      case .batchProcessing: return "square.stack.3d.up"
      case .troubleshooting: return "wrench.and.screwdriver"
      }
    }
    
    var tips: [String] {
      switch self {
      case .dragDrop:
        return [
          "Áõ¥Êé•‰ªéËÆøËææÊãñÊãΩÊñá‰ª∂Âà∞Â∫îÁî®Á™óÂè£ÁöÑÊãñÊãΩÂå∫Âüü",
          "ÊîØÊåÅÂêåÊó∂ÊãñÊãΩÂ§ö‰∏™Êñá‰ª∂ËøõË°åÊâπÈáèÂ§ÑÁêÜ",
          "ÊãñÊãΩÊó∂‰ºöÂÆûÊó∂ÊòæÁ§∫Êñá‰ª∂Ê†ºÂºèÈ™åËØÅÊèêÁ§∫",
          "‰∏çÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºè‰ºöË¢´Ëá™Âä®ËøáÊª§Âπ∂ÊèêÁ§∫",
          "ÊãñÊãΩËøáÁ®ã‰∏≠‰ºöÊòæÁ§∫ÂΩ©Ëâ≤ÂèçÈ¶àÔºöÁªøËâ≤Ë°®Á§∫ÂèØÁî®ÔºåÊ©ôËâ≤Ë°®Á§∫Ê†ºÂºèÈîôËØØ",
          "ÊîØÊåÅ‰ªé‰∏çÂêåÊñá‰ª∂Â§πÂêåÊó∂ÊãñÊãΩÂ§ö‰∏™Êñá‰ª∂"
        ]
      case .fileSelection:
        return [
          "ÁÇπÂáª\"ÈÄâÊã©Êñá‰ª∂\"ÊåâÈíÆÊâìÂºÄÁ≥ªÁªüÂéüÁîüÊñá‰ª∂ÈÄâÊã©Âô®",
          "‰ΩøÁî® ‚åò+A ÂèØ‰ª•ÈÄâÊã©Êñá‰ª∂Â§π‰∏≠ÁöÑÊâÄÊúâÊîØÊåÅÊñá‰ª∂",
          "Êåâ‰Ωè ‚åò ÈîÆÁÇπÂáªÂèØ‰ª•ÈÄâÊã©Â§ö‰∏™‰∏çËøûÁª≠ÁöÑÊñá‰ª∂",
          "Êåâ‰Ωè ‚áß ÈîÆÁÇπÂáªÂèØ‰ª•ÈÄâÊã©ËøûÁª≠ÁöÑÊñá‰ª∂ËåÉÂõ¥",
          "‰ΩøÁî®Á©∫Ê†ºÈîÆÂèØ‰ª•Âø´ÈÄüÈ¢ÑËßàÈÄâ‰∏≠ÁöÑÊñá‰ª∂",
          "Êñá‰ª∂ÈÄâÊã©Âô®‰ºöËá™Âä®ËøáÊª§Âè™ÊòæÁ§∫ÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºè"
        ]
      case .fileSaving:
        return [
          "Â§ÑÁêÜÂÆåÊàêÂêéÁÇπÂáª‰øùÂ≠òÊåâÈíÆÈÄâÊã©‰øùÂ≠ò‰ΩçÁΩÆ",
          "ÈªòËÆ§‰øùÂ≠ò‰ΩçÁΩÆ‰∏∫Ê°åÈù¢Ôºå‰æø‰∫éÂø´ÈÄüÊü•Êâæ",
          "ÂèØ‰ª•Âú®‰øùÂ≠òÂØπËØùÊ°Ü‰∏≠‰øÆÊîπÊñá‰ª∂ÂêçÂíåÊ†ºÂºè",
          "ÊîØÊåÅÂàõÂª∫Êñ∞Êñá‰ª∂Â§πÊù•ÁªÑÁªáÂ§ÑÁêÜÂêéÁöÑÊñá‰ª∂",
          "ÊâπÈáè‰øùÂ≠òÊó∂ÂèØ‰ª•ÈÄâÊã©Áªü‰∏ÄÁöÑ‰øùÂ≠òÊñá‰ª∂Â§π",
          "‰øùÂ≠òÊó∂‰ºöÊòæÁ§∫ËøõÂ∫¶ÂíåÊàêÂäüÊèêÁ§∫"
        ]
      case .batchProcessing:
        return [
          "‰∏ÄÊ¨°ÂèØ‰ª•Â§ÑÁêÜÂ§ö‰∏™Êñá‰ª∂ÔºåÂ§ßÂπÖÊèêÈ´òÂ∑•‰ΩúÊïàÁéá",
          "ÊâÄÊúâÊñá‰ª∂Â∞Ü‰ΩøÁî®Áõ∏ÂêåÁöÑÂ§ÑÁêÜËÆæÁΩÆÂíåÂèÇÊï∞",
          "Â§ÑÁêÜËøáÁ®ã‰∏≠‰ºöÊòæÁ§∫ÂÆûÊó∂ËøõÂ∫¶ÂíåÂΩìÂâçÁä∂ÊÄÅ",
          "ÂèØ‰ª•ÈöèÊó∂ÁÇπÂáªÂèñÊ∂àÊåâÈíÆÂÅúÊ≠¢Ê≠£Âú®ËøõË°åÁöÑÊâπÈáèÂ§ÑÁêÜ",
          "Âª∫ËÆÆÂçïÊ¨°Â§ÑÁêÜÊñá‰ª∂Êï∞Èáè‰∏çË∂ÖËøá50‰∏™‰ª•Á°Æ‰øùÊÄßËÉΩ",
          "Â§ßÊñá‰ª∂ÊâπÈáèÂ§ÑÁêÜÊó∂ËØ∑Á°Æ‰øùÊúâË∂≥Â§üÁöÑÂ≠òÂÇ®Á©∫Èó¥"
        ]
      case .troubleshooting:
        return [
          "Êñá‰ª∂Êó†Ê≥ïÊãñÊãΩÔºöÊ£ÄÊü•Êñá‰ª∂Ê†ºÂºèÊòØÂê¶ÂèóÊîØÊåÅ",
          "Êñá‰ª∂ËøáÂ§ßÔºöÂéãÁº©Êñá‰ª∂ÊàñÂàÜÊâπÂ§ÑÁêÜ",
          "Â§ÑÁêÜÂ§±Ë¥•ÔºöÊ£ÄÊü•Êñá‰ª∂ÊòØÂê¶ÊçüÂùèÊàñË¢´ÂÖ∂‰ªñÁ®ãÂ∫èÂç†Áî®",
          "‰øùÂ≠òÂ§±Ë¥•ÔºöÁ°ÆËÆ§ÁõÆÊ†áÊñá‰ª∂Â§πÊúâÂÜôÂÖ•ÊùÉÈôê",
          "Â∫îÁî®Âç°È°øÔºöÂáèÂ∞ëÂêåÊó∂Â§ÑÁêÜÁöÑÊñá‰ª∂Êï∞Èáè",
          "Ê†ºÂºè‰∏çÊîØÊåÅÔºöÊü•ÁúãÊîØÊåÅÊ†ºÂºèÂàóË°®ÊàñËΩ¨Êç¢Êñá‰ª∂Ê†ºÂºè"
        ]
      }
    }
  }
  
  var body: some View {
    HStack(spacing: 8) {
      Button(action: {
        showingGuide.toggle()
      }) {
        HStack(spacing: 6) {
          Image(systemName: operationType.icon)
            .font(.caption)
          Text("Êìç‰ΩúÊåáÂçó")
            .font(.caption)
            .fontWeight(.medium)
        }
        .foregroundColor(.accentColor)
        .padding(.horizontal, 8)
        .padding(.vertical, 4)
        .background(Color.accentColor.opacity(0.1))
        .cornerRadius(6)
      }
      .buttonStyle(.plain)
      .popover(isPresented: $showingGuide, arrowEdge: .bottom) {
        guideContent
      }
    }
  }
  
  private var guideContent: some View {
    ScrollView {
      VStack(alignment: .leading, spacing: 16) {
        // Enhanced header with visual appeal
        HStack(spacing: 12) {
          ZStack {
            Circle()
              .fill(Color.accentColor.opacity(0.1))
              .frame(width: 40, height: 40)
            
            Image(systemName: operationType.icon)
              .font(.title2)
              .foregroundColor(.accentColor)
          }
          
          VStack(alignment: .leading, spacing: 2) {
            Text(operationType.title)
              .font(.headline)
              .fontWeight(.semibold)
            
            Text("ËØ¶ÁªÜÊìç‰ΩúËØ¥Êòé")
              .font(.caption)
              .foregroundColor(.secondary)
          }
        }
        
        Divider()
        
        // Enhanced tips with better visual hierarchy
        VStack(alignment: .leading, spacing: 12) {
          ForEach(Array(operationType.tips.enumerated()), id: \.offset) { index, tip in
            HStack(alignment: .top, spacing: 12) {
              ZStack {
                Circle()
                  .fill(Color.accentColor.opacity(0.1))
                  .frame(width: 24, height: 24)
                
                Text("\(index + 1)")
                  .font(.caption)
                  .fontWeight(.bold)
                  .foregroundColor(.accentColor)
              }
              
              Text(tip)
                .font(.callout)
                .fixedSize(horizontal: false, vertical: true)
                .lineLimit(nil)
            }
          }
        }
        
        // Enhanced shortcuts section for file selection
        if operationType == .fileSelection {
          Divider()
          
          VStack(alignment: .leading, spacing: 12) {
            HStack(spacing: 8) {
              Image(systemName: "keyboard")
                .font(.caption)
                .foregroundColor(.accentColor)
              Text("ÈîÆÁõòÂø´Êç∑ÈîÆ")
                .font(.subheadline)
                .fontWeight(.semibold)
            }
            
            VStack(alignment: .leading, spacing: 8) {
              shortcutRow("‚åò + A", "ÂÖ®ÈÄâÊñá‰ª∂Â§π‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂")
              shortcutRow("‚åò + ÁÇπÂáª", "ÈÄâÊã©Â§ö‰∏™‰∏çËøûÁª≠ÁöÑÊñá‰ª∂")
              shortcutRow("‚áß + ÁÇπÂáª", "ÈÄâÊã©ËøûÁª≠ËåÉÂõ¥ÂÜÖÁöÑÊñá‰ª∂")
              shortcutRow("Á©∫Ê†ºÈîÆ", "Âø´ÈÄüÈ¢ÑËßàÈÄâ‰∏≠ÁöÑÊñá‰ª∂")
              shortcutRow("‚Üë‚Üì ÊñπÂêëÈîÆ", "ÊµèËßàÊñá‰ª∂ÂàóË°®")
            }
          }
        }
        
        // Enhanced performance tips for batch processing
        if operationType == .batchProcessing {
          Divider()
          
          VStack(alignment: .leading, spacing: 12) {
            HStack(spacing: 8) {
              Image(systemName: "speedometer")
                .font(.caption)
                .foregroundColor(.orange)
              Text("ÊÄßËÉΩ‰ºòÂåñÂª∫ËÆÆ")
                .font(.subheadline)
                .fontWeight(.semibold)
            }
            
            VStack(alignment: .leading, spacing: 6) {
              performanceTip("üìä", "Âª∫ËÆÆÂçïÊ¨°Â§ÑÁêÜÊñá‰ª∂Êï∞Èáè‰∏çË∂ÖËøá50‰∏™")
              performanceTip("üíæ", "Â§ßÊñá‰ª∂Â§ÑÁêÜÊó∂ËØ∑Á°Æ‰øùÊúâË∂≥Â§üÁöÑÂ≠òÂÇ®Á©∫Èó¥")
              performanceTip("‚ö°", "Â§ÑÁêÜËøáÁ®ã‰∏≠ÈÅøÂÖçÂêåÊó∂ËøêË°åÂÖ∂‰ªñÈáçÂûãÂ∫îÁî®")
              performanceTip("üîÑ", "ÂèØ‰ª•ÈöèÊó∂ÂèñÊ∂àÂ§ÑÁêÜÂπ∂ÈáçÊñ∞ÂºÄÂßã")
            }
          }
        }
        
        // Troubleshooting section for troubleshooting type
        if operationType == .troubleshooting {
          VStack(alignment: .leading, spacing: 12) {
            HStack(spacing: 8) {
              Image(systemName: "lightbulb")
                .font(.caption)
                .foregroundColor(.yellow)
              Text("Ëß£ÂÜ≥ÊñπÊ°à")
                .font(.subheadline)
                .fontWeight(.semibold)
            }
            
            Text("ÈÅáÂà∞ÈóÆÈ¢òÊó∂ÔºåËØ∑ÊåâÁÖß‰ª•‰∏äÊ≠•È™§ÈÄê‰∏ÄÊ£ÄÊü•„ÄÇÂ¶ÇÊûúÈóÆÈ¢ò‰ªçÁÑ∂Â≠òÂú®ÔºåËØ∑ÈáçÂêØÂ∫îÁî®ÂêéÈáçËØï„ÄÇ")
              .font(.caption)
              .foregroundColor(.secondary)
              .padding(.horizontal, 8)
              .padding(.vertical, 6)
              .background(Color.yellow.opacity(0.1))
              .cornerRadius(6)
          }
        }
      }
      .padding()
    }
    .frame(width: 320)
    .frame(maxHeight: 400)
  }
  
  private func shortcutRow(_ shortcut: String, _ description: String) -> some View {
    HStack(spacing: 12) {
      Text(shortcut)
        .font(.caption)
        .fontWeight(.semibold)
        .padding(.horizontal, 8)
        .padding(.vertical, 4)
        .background(Color.secondary.opacity(0.15))
        .cornerRadius(6)
        .frame(minWidth: 80, alignment: .center)
      
      Text(description)
        .font(.caption)
        .foregroundColor(.primary)
      
      Spacer()
    }
  }
  
  private func performanceTip(_ icon: String, _ description: String) -> some View {
    HStack(alignment: .top, spacing: 8) {
      Text(icon)
        .font(.caption)
      
      Text(description)
        .font(.caption)
        .foregroundColor(.secondary)
        .fixedSize(horizontal: false, vertical: true)
    }
  }
}

/// Quick access guide buttons for common operations
struct FileOperationQuickGuide: View {
  var body: some View {
    VStack(spacing: 12) {
      HStack {
        Image(systemName: "info.circle.fill")
          .font(.caption)
          .foregroundColor(.accentColor)
        
        Text("Êñá‰ª∂Êìç‰ΩúÂ∏ÆÂä©")
          .font(.subheadline)
          .fontWeight(.semibold)
        
        Spacer()
      }
      
      HStack(spacing: 12) {
        FileOperationGuide(operationType: .dragDrop)
        FileOperationGuide(operationType: .fileSelection)
        FileOperationGuide(operationType: .fileSaving)
        FileOperationGuide(operationType: .batchProcessing)
        FileOperationGuide(operationType: .troubleshooting)
      }
    }
    .padding()
    .background(Color(NSColor.controlBackgroundColor).opacity(0.5))
    .cornerRadius(12)
  }
}

/// Contextual file operation help for specific features
struct ContextualFileOperationHelp: View {
  let supportedTypes: [UTType]
  let maxFileSize: Int64
  let allowsMultiple: Bool
  
  var body: some View {
    VStack(alignment: .leading, spacing: 12) {
      HStack {
        Image(systemName: "lightbulb")
          .font(.caption)
          .foregroundColor(.yellow)
        
        Text("Êìç‰ΩúÊèêÁ§∫")
          .font(.subheadline)
          .fontWeight(.semibold)
      }
      
      VStack(alignment: .leading, spacing: 8) {
        if allowsMultiple {
          helpTip("üìÅ", "ÊîØÊåÅÂêåÊó∂Â§ÑÁêÜÂ§ö‰∏™Êñá‰ª∂ÔºåÊèêÈ´òÂ∑•‰ΩúÊïàÁéá")
        }
        
        helpTip("üéØ", "ÊîØÊåÅÊ†ºÂºèÔºö\(formatTypes())")
        helpTip("üìè", "Êñá‰ª∂Â§ßÂ∞èÈôêÂà∂Ôºö\(ByteCountFormatter.string(fromByteCount: maxFileSize, countStyle: .file))")
        helpTip("üöÄ", "ÊãñÊãΩÊñá‰ª∂Âà∞Âå∫ÂüüÊàñÁÇπÂáªÊåâÈíÆÈÄâÊã©Êñá‰ª∂")
      }
    }
    .padding()
    .background(Color.yellow.opacity(0.05))
    .cornerRadius(8)
  }
  
  private func helpTip(_ icon: String, _ text: String) -> some View {
    HStack(alignment: .top, spacing: 8) {
      Text(icon)
        .font(.caption)
      
      Text(text)
        .font(.caption)
        .foregroundColor(.secondary)
        .fixedSize(horizontal: false, vertical: true)
    }
  }
  
  private func formatTypes() -> String {
    let extensions = supportedTypes.compactMap { type in
      type.preferredFilenameExtension?.uppercased()
    }
    
    if extensions.count <= 3 {
      return extensions.joined(separator: ", ")
    } else {
      let first = extensions.prefix(3).joined(separator: ", ")
      return "\(first) Á≠â \(extensions.count) Áßç"
    }
  }
}

#Preview {
  VStack(spacing: 20) {
    FileOperationGuide(operationType: .dragDrop)
    FileOperationGuide(operationType: .fileSelection)
    FileOperationGuide(operationType: .fileSaving)
    FileOperationGuide(operationType: .batchProcessing)
    
    Divider()
    
    FileOperationQuickGuide()
  }
  .padding()
  .frame(width: 400, height: 500)
}